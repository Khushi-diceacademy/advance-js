
// make any function and write any async code you want , when you write async then it will run or execute later if later line is depends on async line it will fail the code 

// await ka matlab agli line tab tak na chalao jab tak is line ka answer na nikal jaye
// lekin await kehta h bhai mere parent function ko asyc do varna m kaam ni karuga


// Aysnc and Await javascript 
/*
"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise
 */
// async function fetchData() {
//   const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
//   const data = await response.json();
//   console.log(data);
// }

// fetchData();


// async function abcd(){
//   let a = await fetch('https://jsonplaceholder.typicode.com/todos/1');
//   a = await a.json();
// console.log(a);

// }
// abcd();


// In async and await we try to manage the error with the help of try and catch


/*
async function fetchData() {
  let response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  let data = await response.json();
  return data;
}

fetchData()
.then(data => console.log(data));


// async keyword is used to async function that always returns the promise, and await keyword pause the execution until the promise resolves , making code look synchronous
 */




// How do you execute multiple async functions sequentially?
/*
async function task1() {
  console.log('Task 1');
  return 'Task 1 done';
}

async function task2() {
  console.log('Task 2');
  return 'Task 2 done';
}

async function runTasks() {
  await task1();
  await task2();
  console.log('All tasks done');
}

runTasks();
 */


// Parallel Execution with Promise.all()

/*
async function task1() {
  return 'Task 1 done';
}
async function task2() {
  return 'Task 2 done';
}
async function runTasksInParallel() {
  const results = await Promise.all([task1(), task2()]);
  console.log(results); // ['Task 1 done', 'Task 2 done']
}
runTasksInParallel();
 */


// async function task1() {
//   return 'Task 1 done';
// }

// async function task2() {
//   return 'Task 2 done';
// }

// async function runTasksInParallel() {
//   const results = await Promise.all([task1(), task2()]);
//   console.log(results); // ['Task 1 done', 'Task 2 done']
// }

// runTasksInParallel();


// Using await Inside Loops:

// async function processItems(elem) {
//   for (const item of elem) {
//     await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate async task
//     console.log(item);
//   }
// }

// processItems(['A', 'B', 'C']); 


// =====================
// function test() {
//   // This will cause an error
//   const result = await fetch('https://randomuser.me/api/');  
// }

// Solution
// async function testAsync() {
//   const result = await fetch('https://randomuser.me/api/');
//   console.log(result);
  
// }

// testAsync();
// test()

